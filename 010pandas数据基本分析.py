# -*- coding=utf-8 -*-
# Author  : 大白的浅
# Time    : 2019/1/10 19:06
# 描述    : 210773579@qq.com
"""数据基本分析
"""
'''1,基本统计分析

    基本统计分析又叫描述性统计分析，一般统计某个变量的最小值、第一个四分位值、
中值、第三个四分位值以及最大值。
    数据的中心位置是我们最容易想到的数据特征，借助中心位置，我们可以知道数据的
一个平均情况，如果要对数据进行预测，那么平均情况是非常直观的选择。
    数据的中心位置可分为均值（Mean）、中位数（Median）和众数（Mode）。其中，
中值和中位数用于定量的数据，众数用于定性的数据。对于定量的数据（Data）来说，
均值是总和除以总量N，中位数是数值大小位于中间的值，均值相对于中位数来说，
包含的信息量更大。
    描述性统计分析函数为describe。该函数返回有均值、标准差、最大值、最小值、
分位数。括号中可以带一些参数，
如percentiles = [0.2,0.4,0.6,0.8]，
就是指定只计算0.2,0.4,0.6,0.8分位数，而不是默认的1/4,1/2,3/4分位数。

    Numpy可以用mean函数计算平均数，也可以用average函数计算平均成绩，
也可以用Pandas的DataFrame对象的mean方法求值，计算中位数用median函数，
使用mode()计算众数。

常用的统计函数有：
    size：计数，注意，此函数不需要用括号
    sum：求和
    mean：平均值
    var：方差
    std：标准差
'''
import pandas
import random

data = pandas.DataFrame({'语文':[random.randint(55,100) for i in range(1000)],
                     '数学': [random.randint(55, 100) for i in range(1000)],
                     '历史':[random.randint(55,100) for i in range(1000)]})

# print(data['语文'].describe())
# print(data[['语文','数学']].describe())

# print('语文计数: \n',data.语文.size)
# print('语文最大值: \n',data.语文.max())
# print('语文最小值: \n',data.语文.min())
# print('求和: \n',data.语文.sum())
# print('平均fen: \n',data.语文.mean())
# print('方差: \n',data.语文.var())
# print('标准差: \n',data.语文.std())
#计算中位数
# print('中位数: \n',data.median())
#计算众数
# print('众数: \n',data.mode())






'''2.	分组分析

    分组分析是指根据分组字段将分析对象划分成不同的部分，以对比分析各组之间
差异性的一种分析方法。
    常用的统计指标有计数、求和、平均值。
常用命令形式：
Df.groupby(by = [‘分类1’ , ’分类2’ , ……])[‘被统计的列’].统计函数

'''
mydata = pandas.DataFrame({'班级':[2,1,2,1,2,1,2,1,2,1],
                     '性别':['男','男','女','女','女','男','男','女','女','男'],
                     '姓名':['张一','张二','张三','张四','张五','张六','张七','张八','张九','张十'],
                     '语文':[60,65,57,83,76,84,90,75,67,88],
                     '数学':[91,95,93,88,84,83,87,100,68,79],
                     '历史':[91,93,92,95,94,92,90,89,98,97]
                           })

# print('平均值: \n',data.groupby(by=['班级','性别'])['语文','数学','历史'].mean())
# print('最大值: \n',data.groupby(by=['班级','性别'])['语文','数学','历史'].max())
# print('最小值: \n',data.groupby(by=['班级','性别'])['语文','数学','历史'].min())
# print('人数: \n',data.groupby(by=['班级','性别'])['语文','数学','历史'].size())
# print('标注差: \n',data.groupby(by=['班级','性别'])['语文','数学','历史'].std())
# print('方差: \n',data.groupby(by=['班级','性别'])['语文','数学','历史'].var())
# 报错,你要是来复习了记得找找原因了解一下






'''3.	分布分析

    分布分析是指根据分析的目的，将数据进行等距或者不等距的分组，研究各组分布
规律的一种分析方法。
'''
data = pandas.DataFrame({'班级':[2,1,2,1,2,1,2,1,2,1],
                     '姓名':['张一','张二','张三','张四','张五','张六','张七','张八','张九','张十'],
                     '语文':[60,65,57,83,76,84,90,75,67,88],
                     '数学':[91,95,93,88,84,83,87,100,68,79],
                     '历史':[91,93,92,95,94,92,90,89,98,97],
                     })
data['总分'] = data.语文+data.数学+data.历史
bins = [min(data.总分)-1, 245, 255, max(data.总分)+1]
labes = ['245以下', '245-255','255以上']

newdata = pandas.cut(data.总分, bins, labels=labes)
# print('分段信息: \n',newdata)
data['分段'] = newdata
# print(data)







'''4.	交叉分析

    交叉分析通常用于分析两个或两个以上分组变量之间的关系，以交叉表形式进行变
量间关系的对比分析。

常用命令格式：
pivot_table(values , index , columns , aggfunc , fill_value)
参数说明：
    values：表示数据透视表中的值；
    index：表示数据透视表中的行；
    column：表示数据透视表中的列；
    aggfunc：统计函数，fill_value表示NA值的统一替换。
    fill_valve：指定一个标量，用于填充缺失值

'''
import pandas as pd
import numpy as np

data = pd.DataFrame({'班级':[2,1,2,1,2,1,2,1,2,1],
                     '性别': ['男', '男', '女', '女', '女', '女', '男', '男', '女', '男'],
                     '姓名':['张一','张二','张三','张四','张五','张六','张七','张八','张九','张十'],
                     '语文':[60,65,57,83,76,84,90,75,67,88],
                     '数学':[91,95,93,88,84,83,87,100,68,79],
                     '历史':[91,93,92,95,94,92,90,89,98,97],
                     })
data['总分'] = data.语文 + data.数学 + data.历史
bins = [min(data.总分)-1,245,255,max(data.总分)+1]
labes = ['245以下','245-255','255以上']

newdata = pd.cut(data.总分,bins,labels=labes)
data['分段'] = newdata
# print(data)
# print(data.pivot_table(values='总分',
#                        index=['分段','性别'],
#                        columns='班级',
#                        aggfunc=[np.mean,np.size]))






'''5.	结构分析

    结构分析是在分组分析以及交叉分析的基础上，计算各组成部分所占的比重，进而
分析总体的内部特征的一种分析方法。这里的分组主要是看指定性分组，定性分组一般
看结构，它的重点在于计算各组成部分占总体的比重。
'''
import pandas as pd
import numpy as np

data = pd.DataFrame({'班级':[2,1,2,1,2,1,2,1,2,1],
                     '姓名':['张一','张二','张三','张四','张五','张六','张七','张八','张九','张十'],
                     '性别':['男', '男', '女', '女', '女', '女', '男', '男', '女', '男'],
                     '语文':[60,65,57,83,76,84,90,75,67,88],
                     '数学':[91,95,93,88,84,83,87,100,68,79],
                     '历史':[91,93,92,95,94,92,90,89,98,97],
                     })
data['总分'] = data.语文 + data.数学 + data.历史
bins = [min(data.总分)-1,245,255,max(data.总分)+1]
labes = ['245以下','245-255','255以上']

newdata = pd.cut(data.总分,bins,labels=labes)
data['分段'] = newdata

data_pt = data.pivot_table(values='总分',
                       index='班级',
                       columns='性别',
                       aggfunc=[np.sum])

# print(data_pt)
# print('---------------------------------------')
# print(data_pt.sum())         # 按行统计
# print('---------------------------------------')
# print(data_pt.div(data_pt.sum(axis=0),axis =1))
# print('---------------------------------------')
# print(data_pt.sum(axis = 1)) # 按列统计
# print('---------------------------------------')
# print(data_pt.div(data_pt.sum(axis=1),axis =0))






'''6.	相关分析

    判断两个变量是否具有线性相关性的最直观的方法是直接绘制散点图，看变量之间
是否符合某个规律的变化。当需要考察多个变量间的相关关系时，一一绘制它们间的简单
散点图是比较麻烦的。此时可以利用散点矩阵较长同时绘制多种变量间的散点图，从而快
速发现多个变量之间的主要相关性，这在进行多元线性回归时显得尤为重要。

    相关分析是研究现象之间是否存在着某种依存关系，并对具体有依存关系现象探讨其
相关方向以及相关程度，是研究随机变量之间的相关关系的一种统计方法。
    为了更加准确地描述变量之间的线性相关程度，通过相关系数来进行相关分析，
在二元变量的相关分析过程中，比较常用的有Pearson相关系数、Spearman秩相关系统和
判定系数。

相关系数可以用来描述定量变量之间的关系。相关系数与相关程度之间的关系如下：
    
        0   <=  |r| < 0.3	低度相关
        0.3 <=  |r| < 0.8	中度相关
        0 .8<=  |r| <= 1	高度相关
            
相关分析函数有：
DataFrame.corr()    #correlation 相关性
Series.corr(other)

    如果由DataFrame调用corr方法，那么将会计算每列两两之间的相关度，它会返回
一个相关度的DataFrame。如果由序列调用，那么只计算该序列与传入序列之间的相关度，
直接返回相关度。
'''
import pandas

mydata1 = pandas.Series([3,5,7,9,11,13,15,17])
mydata2 = pandas.Series([4,6,8,10,12,14,15,18])
mydata3 = pandas.Series([5,4,5,3,7,8,5,12,9])

# print('相关度1: ',mydata1.corr(mydata2)) #
# print('相关度2: ',mydata1.corr(mydata3)) #


mydata4 = pandas.DataFrame({'数学':[99,96,80,95,55],
                            '物理':[100,97,85,93,60],
                            '语文':[88,86,79,83,86],
                            '英语':[90,91,90,89,88]})
# print('mydata4相关度: \n',mydata4.corr())















































































































































